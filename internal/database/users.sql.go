// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, wallet_address)
VALUES ($1, $2, $3)
RETURNING id, created_at, wallet_address
`

type CreateUserParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	WalletAddress string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ID, arg.CreatedAt, arg.WalletAddress)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.WalletAddress)
	return i, err
}

const getUserByAddress = `-- name: GetUserByAddress :one
SELECT id, created_at, wallet_address FROM users WHERE wallet_address = $1
`

func (q *Queries) GetUserByAddress(ctx context.Context, walletAddress string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAddress, walletAddress)
	var i User
	err := row.Scan(&i.ID, &i.CreatedAt, &i.WalletAddress)
	return i, err
}

const getUsers = `-- name: GetUsers :many

SELECT id, created_at, wallet_address FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.WalletAddress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
