// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: votes.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes (id, created_at, user_id, project_id, value)
VALUES ($1, $2, $3, $4, $5
)
RETURNING id, created_at, user_id, project_id, value
`

type CreateVoteParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UserID    uuid.UUID
	ProjectID uuid.UUID
	Value     int32
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRowContext(ctx, createVote,
		arg.ID,
		arg.CreatedAt,
		arg.UserID,
		arg.ProjectID,
		arg.Value,
	)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.ProjectID,
		&i.Value,
	)
	return i, err
}

const getVotes = `-- name: GetVotes :many
SELECT id, created_at, user_id, project_id, value FROM votes
`

func (q *Queries) GetVotes(ctx context.Context) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, getVotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.ProjectID,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVotesInRange = `-- name: GetVotesInRange :many
SELECT votes.id, votes.created_at, votes.project_id, votes.value, users.wallet_address FROM votes
INNER JOIN users ON votes.user_id = users.id
WHERE votes.created_at > $1 AND votes.created_at < $2 ORDER BY votes.created_at DESC
`

type GetVotesInRangeParams struct {
	CreatedAt   time.Time
	CreatedAt_2 time.Time
}

type GetVotesInRangeRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	ProjectID     uuid.UUID
	Value         int32
	WalletAddress string
}

func (q *Queries) GetVotesInRange(ctx context.Context, arg GetVotesInRangeParams) ([]GetVotesInRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, getVotesInRange, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVotesInRangeRow
	for rows.Next() {
		var i GetVotesInRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.ProjectID,
			&i.Value,
			&i.WalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVotesInRangeForUser = `-- name: GetVotesInRangeForUser :many
SELECT id, created_at, user_id, project_id, value FROM votes WHERE user_id = $1 AND created_at > $2 AND created_at < $3 ORDER BY created_at DESC
`

type GetVotesInRangeForUserParams struct {
	UserID      uuid.UUID
	CreatedAt   time.Time
	CreatedAt_2 time.Time
}

func (q *Queries) GetVotesInRangeForUser(ctx context.Context, arg GetVotesInRangeForUserParams) ([]Vote, error) {
	rows, err := q.db.QueryContext(ctx, getVotesInRangeForUser, arg.UserID, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Vote
	for rows.Next() {
		var i Vote
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.ProjectID,
			&i.Value,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
