// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: projects.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (id, created_at, updated_at, name, wallet_address)
VALUES ($1, $2, $3, $4, $5
)
RETURNING id, created_at, updated_at, name, wallet_address
`

type CreateProjectParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	Name          string
	WalletAddress string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.WalletAddress,
	)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.WalletAddress,
	)
	return i, err
}

const getProjectByAddress = `-- name: GetProjectByAddress :one
SELECT id, created_at, updated_at, name, wallet_address FROM projects WHERE wallet_address = $1
`

func (q *Queries) GetProjectByAddress(ctx context.Context, walletAddress string) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByAddress, walletAddress)
	var i Project
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.WalletAddress,
	)
	return i, err
}

const getProjects = `-- name: GetProjects :many
SELECT id, created_at, updated_at, name, wallet_address FROM projects
`

func (q *Queries) GetProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, getProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
			&i.WalletAddress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
