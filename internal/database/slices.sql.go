// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: slices.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSlice = `-- name: CreateSlice :one

INSERT INTO slices (id, created_at, started_at)
VALUES ($1, $2, $3)
RETURNING id, created_at, started_at
`

type CreateSliceParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	StartedAt time.Time
}

func (q *Queries) CreateSlice(ctx context.Context, arg CreateSliceParams) (Slice, error) {
	row := q.db.QueryRowContext(ctx, createSlice, arg.ID, arg.CreatedAt, arg.StartedAt)
	var i Slice
	err := row.Scan(&i.ID, &i.CreatedAt, &i.StartedAt)
	return i, err
}

const createSliceProject = `-- name: CreateSliceProject :one
INSERT INTO slice_projects (id, created_at, slice_id, value)
VALUES ($1, $2, $3, $4)
RETURNING id, created_at, project_id, slice_id, value
`

type CreateSliceProjectParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	SliceID   uuid.UUID
	Value     int32
}

func (q *Queries) CreateSliceProject(ctx context.Context, arg CreateSliceProjectParams) (SliceProject, error) {
	row := q.db.QueryRowContext(ctx, createSliceProject,
		arg.ID,
		arg.CreatedAt,
		arg.SliceID,
		arg.Value,
	)
	var i SliceProject
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.ProjectID,
		&i.SliceID,
		&i.Value,
	)
	return i, err
}

const getLastSlice = `-- name: GetLastSlice :one
SELECT id, created_at, started_at FROM slices
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetLastSlice(ctx context.Context) (Slice, error) {
	row := q.db.QueryRowContext(ctx, getLastSlice)
	var i Slice
	err := row.Scan(&i.ID, &i.CreatedAt, &i.StartedAt)
	return i, err
}
